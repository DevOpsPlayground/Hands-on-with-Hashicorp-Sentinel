import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"constant_value": "eu-west-1",
			},
		},
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  "~> 4.0",
	},
	"module.s3_bucket:aws": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.s3_bucket",
		"name":                "aws",
		"provider_config_key": "module.s3_bucket:aws",
		"version_constraint":  ">= 4.5.0",
	},
}

resources = {
	"module.module-vpc.aws_eip.application_eip": {
		"address": "module.module-vpc.aws_eip.application_eip",
		"config": {
			"vpc": {
				"constant_value": true,
			},
		},
		"count": {
			"references": [
				"var.application_private_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_eip",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_eip",
	},
	"module.module-vpc.aws_internet_gateway.application_igw": {
		"address": "module.module-vpc.aws_internet_gateway.application_igw",
		"config": {
			"vpc_id": {
				"references": [
					"aws_vpc.application_vpc.id",
					"aws_vpc.application_vpc",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_igw",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_internet_gateway",
	},
	"module.module-vpc.aws_nat_gateway.application_natgw": {
		"address": "module.module-vpc.aws_nat_gateway.application_natgw",
		"config": {
			"allocation_id": {
				"references": [
					"aws_eip.application_eip",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.application_public_subnets",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.application_public_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_natgw",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_nat_gateway",
	},
	"module.module-vpc.aws_route.application_private_route": {
		"address": "module.module-vpc.aws_route.application_private_route",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"nat_gateway_id": {
				"references": [
					"aws_nat_gateway.application_natgw",
					"count.index",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.application_private_route_table",
					"count.index",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.application_private_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_private_route",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.module-vpc.aws_route.application_public_route": {
		"address": "module.module-vpc.aws_route.application_public_route",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"gateway_id": {
				"references": [
					"aws_internet_gateway.application_igw.id",
					"aws_internet_gateway.application_igw",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.application_public_route_table.id",
					"aws_route_table.application_public_route_table",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_public_route",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.module-vpc.aws_route_table.application_private_route_table": {
		"address": "module.module-vpc.aws_route_table.application_private_route_table",
		"config": {
			"vpc_id": {
				"references": [
					"aws_vpc.application_vpc.id",
					"aws_vpc.application_vpc",
				],
			},
		},
		"count": {
			"references": [
				"var.application_private_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_private_route_table",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.module-vpc.aws_route_table.application_public_route_table": {
		"address": "module.module-vpc.aws_route_table.application_public_route_table",
		"config": {
			"vpc_id": {
				"references": [
					"aws_vpc.application_vpc.id",
					"aws_vpc.application_vpc",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_public_route_table",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.module-vpc.aws_route_table_association.application_private_route_assoication": {
		"address": "module.module-vpc.aws_route_table_association.application_private_route_assoication",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.application_private_route_table",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.application_private_subnets",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.application_private_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_private_route_assoication",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.module-vpc.aws_route_table_association.application_public_route_assoication": {
		"address": "module.module-vpc.aws_route_table_association.application_public_route_assoication",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.application_public_route_table.id",
					"aws_route_table.application_public_route_table",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.application_public_subnets",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.application_public_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_public_route_assoication",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.module-vpc.aws_subnet.application_private_subnets": {
		"address": "module.module-vpc.aws_subnet.application_private_subnets",
		"config": {
			"availability_zone": {
				"references": [
					"data.aws_availability_zones.application_nodes_azs.names",
					"data.aws_availability_zones.application_nodes_azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.application_private_subnets_ip_lists",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.application_name",
					"data.aws_availability_zones.application_nodes_azs.names",
					"data.aws_availability_zones.application_nodes_azs",
					"count.index",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.application_vpc.id",
					"aws_vpc.application_vpc",
				],
			},
		},
		"count": {
			"references": [
				"var.application_private_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_private_subnets",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.module-vpc.aws_subnet.application_public_subnets": {
		"address": "module.module-vpc.aws_subnet.application_public_subnets",
		"config": {
			"availability_zone": {
				"references": [
					"data.aws_availability_zones.application_nodes_azs.names",
					"data.aws_availability_zones.application_nodes_azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.application_public_subnets_ip_lists",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.application_name",
					"data.aws_availability_zones.application_nodes_azs.names",
					"data.aws_availability_zones.application_nodes_azs",
					"count.index",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.application_vpc.id",
					"aws_vpc.application_vpc",
				],
			},
		},
		"count": {
			"references": [
				"var.application_public_subnets_ip_lists",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_public_subnets",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.module-vpc.aws_vpc.application_vpc": {
		"address": "module.module-vpc.aws_vpc.application_vpc",
		"config": {
			"cidr_block": {
				"references": [
					"var.application_vpc_block",
				],
			},
			"enable_dns_hostnames": {
				"constant_value": true,
			},
			"tags": {
				"references": [
					"var.application_name",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.module-vpc",
		"name":                "application_vpc",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpc",
	},
	"module.module-vpc.data.aws_availability_zones.application_nodes_azs": {
		"address":             "module.module-vpc.data.aws_availability_zones.application_nodes_azs",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.module-vpc",
		"name":                "application_nodes_azs",
		"provider_config_key": "module.module-vpc:aws",
		"provisioners":        [],
		"type":                "aws_availability_zones",
	},
	"module.s3_bucket.aws_s3_bucket.this": {
		"address": "module.s3_bucket.aws_s3_bucket.this",
		"config": {
			"bucket": {
				"references": [
					"var.bucket",
				],
			},
			"bucket_prefix": {
				"references": [
					"var.bucket_prefix",
				],
			},
			"force_destroy": {
				"references": [
					"var.force_destroy",
				],
			},
			"object_lock_enabled": {
				"references": [
					"var.object_lock_enabled",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket",
	},
	"module.s3_bucket.aws_s3_bucket_accelerate_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_accelerate_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
			"status": {
				"references": [
					"var.acceleration_status",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.acceleration_status",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_accelerate_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_acl.this": {
		"address": "module.s3_bucket.aws_s3_bucket_acl.this",
		"config": {
			"acl": {
				"references": [
					"var.acl",
					"var.acl",
				],
			},
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.acl",
				"var.acl",
				"local.grants",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_acl",
	},
	"module.s3_bucket.aws_s3_bucket_cors_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_cors_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"local.cors_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_cors_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_lifecycle_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_lifecycle_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"local.lifecycle_rules",
			],
		},
		"depends_on": [
			"aws_s3_bucket_versioning.this",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_lifecycle_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_logging.this": {
		"address": "module.s3_bucket.aws_s3_bucket_logging.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"target_bucket": {
				"references": [
					"var.logging[\"target_bucket\"]",
					"var.logging",
				],
			},
			"target_prefix": {
				"references": [
					"var.logging[\"target_prefix\"]",
					"var.logging",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.logging",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_logging",
	},
	"module.s3_bucket.aws_s3_bucket_object_lock_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_object_lock_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
			"rule": [
				{
					"default_retention": [
						{
							"days": {
								"references": [
									"var.object_lock_configuration.rule.default_retention.days",
									"var.object_lock_configuration.rule.default_retention",
									"var.object_lock_configuration.rule",
									"var.object_lock_configuration",
								],
							},
							"mode": {
								"references": [
									"var.object_lock_configuration.rule.default_retention.mode",
									"var.object_lock_configuration.rule.default_retention",
									"var.object_lock_configuration.rule",
									"var.object_lock_configuration",
								],
							},
							"years": {
								"references": [
									"var.object_lock_configuration.rule.default_retention.years",
									"var.object_lock_configuration.rule.default_retention",
									"var.object_lock_configuration.rule",
									"var.object_lock_configuration",
								],
							},
						},
					],
				},
			],
			"token": {
				"references": [
					"var.object_lock_configuration.token",
					"var.object_lock_configuration",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.object_lock_enabled",
				"var.object_lock_configuration.rule.default_retention",
				"var.object_lock_configuration.rule",
				"var.object_lock_configuration",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_object_lock_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_ownership_controls.this": {
		"address": "module.s3_bucket.aws_s3_bucket_ownership_controls.this",
		"config": {
			"bucket": {
				"references": [
					"local.attach_policy",
					"aws_s3_bucket_policy.this[0].id",
					"aws_s3_bucket_policy.this[0]",
					"aws_s3_bucket_policy.this",
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"rule": [
				{
					"object_ownership": {
						"references": [
							"var.object_ownership",
						],
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.control_object_ownership",
			],
		},
		"depends_on": [
			"aws_s3_bucket_policy.this",
			"aws_s3_bucket_public_access_block.this",
			"aws_s3_bucket.this",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_ownership_controls",
	},
	"module.s3_bucket.aws_s3_bucket_policy.this": {
		"address": "module.s3_bucket.aws_s3_bucket_policy.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"policy": {
				"references": [
					"data.aws_iam_policy_document.combined[0].json",
					"data.aws_iam_policy_document.combined[0]",
					"data.aws_iam_policy_document.combined",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"local.attach_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_policy",
	},
	"module.s3_bucket.aws_s3_bucket_public_access_block.this": {
		"address": "module.s3_bucket.aws_s3_bucket_public_access_block.this",
		"config": {
			"block_public_acls": {
				"references": [
					"var.block_public_acls",
				],
			},
			"block_public_policy": {
				"references": [
					"var.block_public_policy",
				],
			},
			"bucket": {
				"references": [
					"local.attach_policy",
					"aws_s3_bucket_policy.this[0].id",
					"aws_s3_bucket_policy.this[0]",
					"aws_s3_bucket_policy.this",
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"ignore_public_acls": {
				"references": [
					"var.ignore_public_acls",
				],
			},
			"restrict_public_buckets": {
				"references": [
					"var.restrict_public_buckets",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_public_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_public_access_block",
	},
	"module.s3_bucket.aws_s3_bucket_replication_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_replication_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"role": {
				"references": [
					"var.replication_configuration[\"role\"]",
					"var.replication_configuration",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.replication_configuration",
			],
		},
		"depends_on": [
			"aws_s3_bucket_versioning.this",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_replication_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_request_payment_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_request_payment_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
			"payer": {
				"references": [
					"var.request_payer",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.request_payer",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_request_payment_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_server_side_encryption_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_server_side_encryption_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.server_side_encryption_configuration",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_server_side_encryption_configuration",
	},
	"module.s3_bucket.aws_s3_bucket_versioning.this": {
		"address": "module.s3_bucket.aws_s3_bucket_versioning.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
			"mfa": {
				"references": [
					"var.versioning[\"mfa\"]",
					"var.versioning",
				],
			},
			"versioning_configuration": [
				{
					"mfa_delete": {
						"references": [
							"var.versioning[\"mfa_delete\"]",
							"var.versioning",
							"var.versioning[\"mfa_delete\"]",
							"var.versioning",
						],
					},
					"status": {
						"references": [
							"var.versioning[\"enabled\"]",
							"var.versioning",
							"var.versioning[\"status\"]",
							"var.versioning",
							"var.versioning[\"status\"]",
							"var.versioning",
						],
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.versioning",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_versioning",
	},
	"module.s3_bucket.aws_s3_bucket_website_configuration.this": {
		"address": "module.s3_bucket.aws_s3_bucket_website_configuration.this",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.this[0].id",
					"aws_s3_bucket.this[0]",
					"aws_s3_bucket.this",
				],
			},
			"expected_bucket_owner": {
				"references": [
					"var.expected_bucket_owner",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.website",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_website_configuration",
	},
	"module.s3_bucket.data.aws_canonical_user_id.this": {
		"address":             "module.s3_bucket.data.aws_canonical_user_id.this",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_canonical_user_id",
	},
	"module.s3_bucket.data.aws_elb_service_account.this": {
		"address": "module.s3_bucket.data.aws_elb_service_account.this",
		"config":  {},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_elb_log_delivery_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "this",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_elb_service_account",
	},
	"module.s3_bucket.data.aws_iam_policy_document.combined": {
		"address": "module.s3_bucket.data.aws_iam_policy_document.combined",
		"config": {
			"source_policy_documents": {
				"references": [
					"var.attach_elb_log_delivery_policy",
					"data.aws_iam_policy_document.elb_log_delivery[0].json",
					"data.aws_iam_policy_document.elb_log_delivery[0]",
					"data.aws_iam_policy_document.elb_log_delivery",
					"var.attach_lb_log_delivery_policy",
					"data.aws_iam_policy_document.lb_log_delivery[0].json",
					"data.aws_iam_policy_document.lb_log_delivery[0]",
					"data.aws_iam_policy_document.lb_log_delivery",
					"var.attach_require_latest_tls_policy",
					"data.aws_iam_policy_document.require_latest_tls[0].json",
					"data.aws_iam_policy_document.require_latest_tls[0]",
					"data.aws_iam_policy_document.require_latest_tls",
					"var.attach_deny_insecure_transport_policy",
					"data.aws_iam_policy_document.deny_insecure_transport[0].json",
					"data.aws_iam_policy_document.deny_insecure_transport[0]",
					"data.aws_iam_policy_document.deny_insecure_transport",
					"var.attach_policy",
					"var.policy",
				],
			},
		},
		"count": {
			"references": [
				"local.create_bucket",
				"local.attach_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "combined",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.s3_bucket.data.aws_iam_policy_document.deny_insecure_transport": {
		"address": "module.s3_bucket.data.aws_iam_policy_document.deny_insecure_transport",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"s3:*",
						],
					},
					"condition": [
						{
							"test": {
								"constant_value": "Bool",
							},
							"values": {
								"constant_value": [
									"false",
								],
							},
							"variable": {
								"constant_value": "aws:SecureTransport",
							},
						},
					],
					"effect": {
						"constant_value": "Deny",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"*",
								],
							},
							"type": {
								"constant_value": "*",
							},
						},
					],
					"resources": {
						"references": [
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
						],
					},
					"sid": {
						"constant_value": "denyInsecureTransport",
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_deny_insecure_transport_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "deny_insecure_transport",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.s3_bucket.data.aws_iam_policy_document.elb_log_delivery": {
		"address": "module.s3_bucket.data.aws_iam_policy_document.elb_log_delivery",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"s3:PutObject",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"principals": [
						{
							"identifiers": {
								"references": [
									"data.aws_elb_service_account.this",
								],
							},
							"type": {
								"constant_value": "AWS",
							},
						},
					],
					"resources": {
						"references": [
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
						],
					},
					"sid": {
						"constant_value": "",
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_elb_log_delivery_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "elb_log_delivery",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.s3_bucket.data.aws_iam_policy_document.lb_log_delivery": {
		"address": "module.s3_bucket.data.aws_iam_policy_document.lb_log_delivery",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"s3:PutObject",
						],
					},
					"condition": [
						{
							"test": {
								"constant_value": "StringEquals",
							},
							"values": {
								"constant_value": [
									"bucket-owner-full-control",
								],
							},
							"variable": {
								"constant_value": "s3:x-amz-acl",
							},
						},
					],
					"effect": {
						"constant_value": "Allow",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"delivery.logs.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
					"resources": {
						"references": [
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
						],
					},
					"sid": {
						"constant_value": "AWSLogDeliveryWrite",
					},
				},
				{
					"actions": {
						"constant_value": [
							"s3:GetBucketAcl",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"delivery.logs.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
					"resources": {
						"references": [
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
						],
					},
					"sid": {
						"constant_value": "AWSLogDeliveryAclCheck",
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_lb_log_delivery_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "lb_log_delivery",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.s3_bucket.data.aws_iam_policy_document.require_latest_tls": {
		"address": "module.s3_bucket.data.aws_iam_policy_document.require_latest_tls",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"s3:*",
						],
					},
					"condition": [
						{
							"test": {
								"constant_value": "NumericLessThan",
							},
							"values": {
								"constant_value": [
									"1.2",
								],
							},
							"variable": {
								"constant_value": "s3:TlsVersion",
							},
						},
					],
					"effect": {
						"constant_value": "Deny",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"*",
								],
							},
							"type": {
								"constant_value": "*",
							},
						},
					],
					"resources": {
						"references": [
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
							"aws_s3_bucket.this[0].arn",
							"aws_s3_bucket.this[0]",
							"aws_s3_bucket.this",
						],
					},
					"sid": {
						"constant_value": "denyOutdatedTLS",
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_bucket",
				"var.attach_require_latest_tls_policy",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.s3_bucket",
		"name":                "require_latest_tls",
		"provider_config_key": "module.s3_bucket:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
}

provisioners = {}

variables = {
	"module.module-vpc:application_name": {
		"default":        null,
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_name",
	},
	"module.module-vpc:application_private_subnets_ip_lists": {
		"default":        null,
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_private_subnets_ip_lists",
	},
	"module.module-vpc:application_public_subnets_ip_lists": {
		"default":        null,
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_public_subnets_ip_lists",
	},
	"module.module-vpc:application_vpc_block": {
		"default":        null,
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_vpc_block",
	},
	"module.s3_bucket:acceleration_status": {
		"default":        null,
		"description":    "(Optional) Sets the accelerate configuration of an existing bucket. Can be Enabled or Suspended.",
		"module_address": "module.s3_bucket",
		"name":           "acceleration_status",
	},
	"module.s3_bucket:acl": {
		"default":        null,
		"description":    "(Optional) The canned ACL to apply. Conflicts with `grant`",
		"module_address": "module.s3_bucket",
		"name":           "acl",
	},
	"module.s3_bucket:attach_deny_insecure_transport_policy": {
		"default":        false,
		"description":    "Controls if S3 bucket should have deny non-SSL transport policy attached",
		"module_address": "module.s3_bucket",
		"name":           "attach_deny_insecure_transport_policy",
	},
	"module.s3_bucket:attach_elb_log_delivery_policy": {
		"default":        false,
		"description":    "Controls if S3 bucket should have ELB log delivery policy attached",
		"module_address": "module.s3_bucket",
		"name":           "attach_elb_log_delivery_policy",
	},
	"module.s3_bucket:attach_lb_log_delivery_policy": {
		"default":        false,
		"description":    "Controls if S3 bucket should have ALB/NLB log delivery policy attached",
		"module_address": "module.s3_bucket",
		"name":           "attach_lb_log_delivery_policy",
	},
	"module.s3_bucket:attach_policy": {
		"default":        false,
		"description":    "Controls if S3 bucket should have bucket policy attached (set to `true` to use value of `policy` as bucket policy)",
		"module_address": "module.s3_bucket",
		"name":           "attach_policy",
	},
	"module.s3_bucket:attach_public_policy": {
		"default":        true,
		"description":    "Controls if a user defined public bucket policy will be attached (set to `false` to allow upstream to apply defaults to the bucket)",
		"module_address": "module.s3_bucket",
		"name":           "attach_public_policy",
	},
	"module.s3_bucket:attach_require_latest_tls_policy": {
		"default":        false,
		"description":    "Controls if S3 bucket should require the latest version of TLS",
		"module_address": "module.s3_bucket",
		"name":           "attach_require_latest_tls_policy",
	},
	"module.s3_bucket:block_public_acls": {
		"default":        false,
		"description":    "Whether Amazon S3 should block public ACLs for this bucket.",
		"module_address": "module.s3_bucket",
		"name":           "block_public_acls",
	},
	"module.s3_bucket:block_public_policy": {
		"default":        false,
		"description":    "Whether Amazon S3 should block public bucket policies for this bucket.",
		"module_address": "module.s3_bucket",
		"name":           "block_public_policy",
	},
	"module.s3_bucket:bucket": {
		"default":        null,
		"description":    "(Optional, Forces new resource) The name of the bucket. If omitted, Terraform will assign a random, unique name.",
		"module_address": "module.s3_bucket",
		"name":           "bucket",
	},
	"module.s3_bucket:bucket_prefix": {
		"default":        null,
		"description":    "(Optional, Forces new resource) Creates a unique bucket name beginning with the specified prefix. Conflicts with bucket.",
		"module_address": "module.s3_bucket",
		"name":           "bucket_prefix",
	},
	"module.s3_bucket:control_object_ownership": {
		"default":        false,
		"description":    "Whether to manage S3 Bucket Ownership Controls on this bucket.",
		"module_address": "module.s3_bucket",
		"name":           "control_object_ownership",
	},
	"module.s3_bucket:cors_rule": {
		"default":        [],
		"description":    "List of maps containing rules for Cross-Origin Resource Sharing.",
		"module_address": "module.s3_bucket",
		"name":           "cors_rule",
	},
	"module.s3_bucket:create_bucket": {
		"default":        true,
		"description":    "Controls if S3 bucket should be created",
		"module_address": "module.s3_bucket",
		"name":           "create_bucket",
	},
	"module.s3_bucket:expected_bucket_owner": {
		"default":        null,
		"description":    "The account ID of the expected bucket owner",
		"module_address": "module.s3_bucket",
		"name":           "expected_bucket_owner",
	},
	"module.s3_bucket:force_destroy": {
		"default":        false,
		"description":    "(Optional, Default:false ) A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable.",
		"module_address": "module.s3_bucket",
		"name":           "force_destroy",
	},
	"module.s3_bucket:grant": {
		"default":        [],
		"description":    "An ACL policy grant. Conflicts with `acl`",
		"module_address": "module.s3_bucket",
		"name":           "grant",
	},
	"module.s3_bucket:ignore_public_acls": {
		"default":        false,
		"description":    "Whether Amazon S3 should ignore public ACLs for this bucket.",
		"module_address": "module.s3_bucket",
		"name":           "ignore_public_acls",
	},
	"module.s3_bucket:lifecycle_rule": {
		"default":        [],
		"description":    "List of maps containing configuration of object lifecycle management.",
		"module_address": "module.s3_bucket",
		"name":           "lifecycle_rule",
	},
	"module.s3_bucket:logging": {
		"default":        {},
		"description":    "Map containing access bucket logging configuration.",
		"module_address": "module.s3_bucket",
		"name":           "logging",
	},
	"module.s3_bucket:object_lock_configuration": {
		"default":        {},
		"description":    "Map containing S3 object locking configuration.",
		"module_address": "module.s3_bucket",
		"name":           "object_lock_configuration",
	},
	"module.s3_bucket:object_lock_enabled": {
		"default":        false,
		"description":    "Whether S3 bucket should have an Object Lock configuration enabled.",
		"module_address": "module.s3_bucket",
		"name":           "object_lock_enabled",
	},
	"module.s3_bucket:object_ownership": {
		"default":        "ObjectWriter",
		"description":    "Object ownership. Valid values: BucketOwnerEnforced, BucketOwnerPreferred or ObjectWriter. 'BucketOwnerEnforced': ACLs are disabled, and the bucket owner automatically owns and has full control over every object in the bucket. 'BucketOwnerPreferred': Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. 'ObjectWriter': The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL.",
		"module_address": "module.s3_bucket",
		"name":           "object_ownership",
	},
	"module.s3_bucket:owner": {
		"default":        {},
		"description":    "Bucket owner's display name and ID. Conflicts with `acl`",
		"module_address": "module.s3_bucket",
		"name":           "owner",
	},
	"module.s3_bucket:policy": {
		"default":        null,
		"description":    "(Optional) A valid bucket policy JSON document. Note that if the policy document is not specific enough (but still valid), Terraform may view the policy as constantly changing in a terraform plan. In this case, please make sure you use the verbose/specific version of the policy. For more information about building AWS IAM policy documents with Terraform, see the AWS IAM Policy Document Guide.",
		"module_address": "module.s3_bucket",
		"name":           "policy",
	},
	"module.s3_bucket:putin_khuylo": {
		"default":        true,
		"description":    "Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!",
		"module_address": "module.s3_bucket",
		"name":           "putin_khuylo",
	},
	"module.s3_bucket:replication_configuration": {
		"default":        {},
		"description":    "Map containing cross-region replication configuration.",
		"module_address": "module.s3_bucket",
		"name":           "replication_configuration",
	},
	"module.s3_bucket:request_payer": {
		"default":        null,
		"description":    "(Optional) Specifies who should bear the cost of Amazon S3 data transfer. Can be either BucketOwner or Requester. By default, the owner of the S3 bucket would incur the costs of any data transfer. See Requester Pays Buckets developer guide for more information.",
		"module_address": "module.s3_bucket",
		"name":           "request_payer",
	},
	"module.s3_bucket:restrict_public_buckets": {
		"default":        false,
		"description":    "Whether Amazon S3 should restrict public bucket policies for this bucket.",
		"module_address": "module.s3_bucket",
		"name":           "restrict_public_buckets",
	},
	"module.s3_bucket:server_side_encryption_configuration": {
		"default":        {},
		"description":    "Map containing server-side encryption configuration.",
		"module_address": "module.s3_bucket",
		"name":           "server_side_encryption_configuration",
	},
	"module.s3_bucket:tags": {
		"default":        {},
		"description":    "(Optional) A mapping of tags to assign to the bucket.",
		"module_address": "module.s3_bucket",
		"name":           "tags",
	},
	"module.s3_bucket:versioning": {
		"default":        {},
		"description":    "Map containing versioning configuration.",
		"module_address": "module.s3_bucket",
		"name":           "versioning",
	},
	"module.s3_bucket:website": {
		"default":        {},
		"description":    "Map containing static web-site hosting or redirect configuration.",
		"module_address": "module.s3_bucket",
		"name":           "website",
	},
}

outputs = {
	"module.module-vpc:application_eip": {
		"depends_on":     [],
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_eip",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eip.application_eip",
			],
		},
	},
	"module.module-vpc:application_private_subnets": {
		"depends_on":     [],
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_private_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.application_private_subnets",
			],
		},
	},
	"module.module-vpc:application_public_subnets": {
		"depends_on":     [],
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_public_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.application_public_subnets",
			],
		},
	},
	"module.module-vpc:application_vpc": {
		"depends_on":     [],
		"description":    "",
		"module_address": "module.module-vpc",
		"name":           "application_vpc",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.application_vpc.id",
				"aws_vpc.application_vpc",
			],
		},
	},
	"module.s3_bucket:s3_bucket_arn": {
		"depends_on":     [],
		"description":    "The ARN of the bucket. Will be of format arn:aws:s3:::bucketname.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.this[0].arn",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_bucket_domain_name": {
		"depends_on":     [],
		"description":    "The bucket domain name. Will be of format bucketname.s3.amazonaws.com.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_bucket_domain_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.this[0].bucket_domain_name",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_bucket_regional_domain_name": {
		"depends_on":     [],
		"description":    "The bucket region-specific domain name. The bucket domain name including the region name, please refer here for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent redirect issues from CloudFront to S3 Origin URL.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_bucket_regional_domain_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.this[0].bucket_regional_domain_name",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_hosted_zone_id": {
		"depends_on":     [],
		"description":    "The Route 53 Hosted Zone ID for this bucket's region.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_hosted_zone_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.this[0].hosted_zone_id",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_id": {
		"depends_on":     [],
		"description":    "The name of the bucket.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket_policy.this[0].id",
				"aws_s3_bucket_policy.this[0]",
				"aws_s3_bucket_policy.this",
				"aws_s3_bucket.this[0].id",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_region": {
		"depends_on":     [],
		"description":    "The AWS region this bucket resides in.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_region",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket.this[0].region",
				"aws_s3_bucket.this[0]",
				"aws_s3_bucket.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_website_domain": {
		"depends_on":     [],
		"description":    "The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_website_domain",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket_website_configuration.this[0].website_domain",
				"aws_s3_bucket_website_configuration.this[0]",
				"aws_s3_bucket_website_configuration.this",
			],
		},
	},
	"module.s3_bucket:s3_bucket_website_endpoint": {
		"depends_on":     [],
		"description":    "The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.",
		"module_address": "module.s3_bucket",
		"name":           "s3_bucket_website_endpoint",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_s3_bucket_website_configuration.this[0].website_endpoint",
				"aws_s3_bucket_website_configuration.this[0]",
				"aws_s3_bucket_website_configuration.this",
			],
		},
	},
}

module_calls = {
	"module-vpc": {
		"config": {
			"application_name": {
				"constant_value": "DevOps Playground",
			},
			"application_private_subnets_ip_lists": {
				"constant_value": [
					"10.40.64.0/20",
					"10.40.80.0/20",
					"10.40.96.0/20",
				],
			},
			"application_public_subnets_ip_lists": {
				"constant_value": [
					"10.40.0.0/20",
					"10.40.16.0/20",
					"10.40.32.0/20",
				],
			},
			"application_vpc_block": {
				"constant_value": "10.40.0.0/17",
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "",
		"name":               "module-vpc",
		"source":             "app.terraform.io/wale-play-ground/module-vpc/aws",
		"version_constraint": "0.0.1",
	},
	"s3_bucket": {
		"config": {
			"acl": {
				"constant_value": "private",
			},
			"bucket": {
				"constant_value": "devops-playground-april-bucket",
			},
			"versioning": {
				"constant_value": {
					"enabled": true,
				},
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "",
		"name":               "s3_bucket",
		"source":             "terraform-aws-modules/s3-bucket/aws",
		"version_constraint": "",
	},
}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
